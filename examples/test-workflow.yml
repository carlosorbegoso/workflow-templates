# ============================================
# ARCHIVO DE PRUEBA PARA VERIFICAR EL WORKFLOW
# ============================================
# 
# Usa este archivo para probar el smart-pipeline
# antes de implementarlo en tus microservicios
#
# ============================================

name: Test Smart Pipeline

on:
  workflow_dispatch:  # Permite ejecutar manualmente
  push:
    branches: [test-branch]

jobs:
  test-smart-pipeline:
    uses: carlosorbegoso/workflow-templates/.github/workflows/smart-pipeline.yml@main
    secrets:
      # PRODUCCIÓN (mínimos requeridos)
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      
      # REGISTRY (opcionales)
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
      
      # DESARROLLO (opcionales - para testing)
      DEV_SSH_HOST: ${{ secrets.DEV_SSH_HOST }}
      DEV_SSH_USER: ${{ secrets.DEV_SSH_USER }}
      DEV_SSH_PRIVATE_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
      DEV_DEPLOY_PATH: ${{ secrets.DEV_DEPLOY_PATH }}
      DEV_DB_USERNAME: ${{ secrets.DEV_DB_USERNAME }}
      DEV_DB_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}
      
      # CALIDAD (opcional)
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

# ============================================
# INSTRUCCIONES DE PRUEBA:
# ============================================
#
# 1. Crea una rama llamada 'test-branch'
# 2. Copia este archivo como .github/workflows/test.yml
# 3. Haz push a test-branch
# 4. Verifica que el workflow se ejecute como "DESARROLLO"
# 5. Haz push a main
# 6. Verifica que se ejecute como "PRODUCCIÓN"
# 7. Crea un PR
# 8. Verifica que se ejecute como "PULL REQUEST"
#
# ============================================