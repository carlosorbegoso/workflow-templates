name: Adaptive CI/CD Pipeline

on:
  workflow_call:
    secrets:
      # Production secrets
      SSH_HOST:
        required: false
      SSH_USER:
        required: false
      SSH_PRIVATE_KEY:
        required: false
      DEPLOY_PATH:
        required: false
      
      # Development secrets
      DEV_SSH_HOST:
        required: false
      DEV_SSH_USER:
        required: false
      DEV_SSH_PRIVATE_KEY:
        required: false
      DEV_DEPLOY_PATH:
        required: false
      
      # Registry secrets
      GHCR_USERNAME:
        required: false
      GHCR_PAT:
        required: false
      
      # Database secrets
      DB_USERNAME:
        required: false
      DB_PASSWORD:
        required: false
      DATABASE_URL:
        required: false
      DEV_DB_USERNAME:
        required: false
      DEV_DB_PASSWORD:
        required: false
      DEV_DATABASE_URL:
        required: false
      
      # JWT/Auth secrets
      JWT_SECRET:
        required: false
      JWT_ISSUER:
        required: false
      
      # Email/SMTP secrets
      MAILER_FROM:
        required: false
      SMTP_HOST:
        required: false
      SMTP_PORT:
        required: false
      EMAIL_USERNAME:
        required: false
      EMAIL_PASSWORD:
        required: false
      
      # CORS configuration
      CORS_ORIGINS:
        required: false
      
      # Quality secrets
      SONAR_TOKEN:
        required: false

jobs:
  # Job para detectar el entorno y configuración
  setup:
    name: Setup Pipeline
    runs-on: ubuntu-latest
    outputs:
      is_production: ${{ steps.detect.outputs.is_production }}
      is_development: ${{ steps.detect.outputs.is_development }}
      is_pr: ${{ steps.detect.outputs.is_pr }}
      run_tests: ${{ steps.detect.outputs.run_tests }}
      run_quality: ${{ steps.detect.outputs.run_quality }}
      run_security: ${{ steps.detect.outputs.run_security }}
      run_build: ${{ steps.detect.outputs.run_build }}
      run_deploy: ${{ steps.detect.outputs.run_deploy }}
      use_prod_secrets: ${{ steps.detect.outputs.use_prod_secrets }}
      use_dev_secrets: ${{ steps.detect.outputs.use_dev_secrets }}
    
    steps:
      - name: Detect environment and configure pipeline
        id: detect
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          
          # Detectar tipo de pipeline
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # PULL REQUEST: Solo tests rápidos
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
            echo "is_development=false" >> $GITHUB_OUTPUT
            echo "run_tests=true" >> $GITHUB_OUTPUT
            echo "run_quality=false" >> $GITHUB_OUTPUT
            echo "run_security=false" >> $GITHUB_OUTPUT
            echo "run_build=false" >> $GITHUB_OUTPUT
            echo "run_deploy=false" >> $GITHUB_OUTPUT
            echo "Pipeline: PR - Tests rápidos solamente"
            
          elif [ "${{ github.ref_name }}" = "main" ]; then
            # PRODUCCIÓN: Build y deploy ultra-rápido
            echo "is_production=true" >> $GITHUB_OUTPUT
            echo "is_development=false" >> $GITHUB_OUTPUT
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "run_tests=false" >> $GITHUB_OUTPUT
            echo "run_quality=false" >> $GITHUB_OUTPUT
            echo "run_security=false" >> $GITHUB_OUTPUT
            echo "run_build=true" >> $GITHUB_OUTPUT
            echo "run_deploy=true" >> $GITHUB_OUTPUT
            
            # Usar secrets de producción (no como outputs por seguridad)
            echo "use_prod_secrets=true" >> $GITHUB_OUTPUT
            echo "Pipeline: PRODUCCIÓN - Build nativo optimizado y deploy directo"
            
          else
            # DESARROLLO: Pipeline completo
            echo "is_development=true" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "run_tests=true" >> $GITHUB_OUTPUT
            echo "run_quality=true" >> $GITHUB_OUTPUT
            echo "run_security=true" >> $GITHUB_OUTPUT
            echo "run_build=true" >> $GITHUB_OUTPUT
            echo "run_deploy=true" >> $GITHUB_OUTPUT
            
            # Detectar si hay secrets de desarrollo disponibles
            if [ -n "${{ secrets.DEV_SSH_HOST }}" ]; then
              echo "use_dev_secrets=true" >> $GITHUB_OUTPUT
            else
              echo "use_dev_secrets=false" >> $GITHUB_OUTPUT
            fi
            echo "Pipeline: DESARROLLO - Pipeline completo con calidad"
          fi

  # Tests (solo para PR y desarrollo)
  test:
    name: Run Tests
    needs: setup
    if: needs.setup.outputs.run_tests == 'true'
    uses: carlosorbegoso/workflow-templates/.github/workflows/development/test.yml@main
    with:
      java_version: '21'
      run_integration_tests: ${{ needs.setup.outputs.is_development == 'true' }}

  # Quality checks (solo para desarrollo)
  quality:
    name: Quality Checks
    needs: [setup, test]
    if: needs.setup.outputs.run_quality == 'true' && (needs.test.result == 'success' || needs.test.result == 'skipped')
    uses: carlosorbegoso/workflow-templates/.github/workflows/development/quality-check.yml@main
    with:
      sonar_enabled: true
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Security scan (solo para desarrollo)
  security:
    name: Security Scan
    needs: setup
    if: needs.setup.outputs.run_security == 'true'
    uses: carlosorbegoso/workflow-templates/.github/workflows/development/security-scan.yml@main
    with:
      scan_dependencies: true
      scan_code: true

  # Build y Push unificado
  build-and-push:
    name: Build & Push Image
    needs: [setup]
    if: needs.setup.outputs.run_build == 'true'
    uses: carlosorbegoso/workflow-templates/.github/workflows/build-and-push.yml@main
    with:
      build_type: ${{ needs.setup.outputs.is_production == 'true' && 'native' || 'jvm' }}
      use_ghcr: true
      push_to_registry: true
      production_optimized: ${{ needs.setup.outputs.is_production == 'true' }}
    secrets:
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_PAT: ${{ secrets.GHCR_PAT }}

  # Deploy unificado
  deploy:
    name: Deploy Application
    needs: [setup, build-and-push]
    if: needs.setup.outputs.run_deploy == 'true' && needs.build-and-push.result == 'success'
    uses: carlosorbegoso/workflow-templates/.github/workflows/shared/deploy.yml@main
    with:
      image_version: ${{ needs.build-and-push.outputs.image-version }}
      environment: ${{ needs.setup.outputs.is_production == 'true' && 'production' || 'development' }}
      push_to_registry: true
    secrets:
      # Infraestructura
      SSH_HOST: ${{ needs.setup.outputs.use_dev_secrets == 'true' && secrets.DEV_SSH_HOST || secrets.SSH_HOST }}
      SSH_USER: ${{ needs.setup.outputs.use_dev_secrets == 'true' && secrets.DEV_SSH_USER || secrets.SSH_USER }}
      SSH_PRIVATE_KEY: ${{ needs.setup.outputs.use_dev_secrets == 'true' && secrets.DEV_SSH_PRIVATE_KEY || secrets.SSH_PRIVATE_KEY }}
      DEPLOY_PATH: ${{ needs.setup.outputs.use_dev_secrets == 'true' && secrets.DEV_DEPLOY_PATH || secrets.DEPLOY_PATH }}
      
      # Base de datos
      DB_USERNAME: ${{ needs.setup.outputs.use_dev_secrets == 'true' && secrets.DEV_DB_USERNAME || secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ needs.setup.outputs.use_dev_secrets == 'true' && secrets.DEV_DB_PASSWORD || secrets.DB_PASSWORD }}
      DATABASE_URL: ${{ needs.setup.outputs.use_dev_secrets == 'true' && secrets.DEV_DATABASE_URL || secrets.DATABASE_URL }}
      
      # Aplicación
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
      MAILER_FROM: ${{ secrets.MAILER_FROM }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}
      
      # Registry
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_PAT: ${{ secrets.GHCR_PAT }}

  # Summary job
  summary:
    name: Pipeline Summary
    needs: [setup, test, quality, security, build-and-push, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Pipeline Summary
        run: |
          echo "================================"
          echo "PIPELINE SUMMARY"
          echo "================================"
          echo "Environment: ${{ needs.setup.outputs.is_production == 'true' && 'PRODUCTION' || needs.setup.outputs.is_development == 'true' && 'DEVELOPMENT' || 'PULL REQUEST' }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo ""
          echo "Configuration:"
          echo "- Use Dev Secrets: ${{ needs.setup.outputs.use_dev_secrets || 'false' }}"
          echo "- Use Prod Secrets: ${{ needs.setup.outputs.use_prod_secrets || 'false' }}"
          echo ""
          echo "Jobs executed:"
          echo "- Tests: ${{ needs.setup.outputs.run_tests }}"
          echo "- Quality: ${{ needs.setup.outputs.run_quality }}"
          echo "- Security: ${{ needs.setup.outputs.run_security }}"
          echo "- Build & Push: ${{ needs.setup.outputs.run_build }}"
          echo "- Deploy: ${{ needs.setup.outputs.run_deploy }}"
          echo ""
          echo "Results:"
          echo "- Tests: ${{ needs.test.result || 'skipped' }}"
          echo "- Quality: ${{ needs.quality.result || 'skipped' }}"
          echo "- Security: ${{ needs.security.result || 'skipped' }}"
          echo "- Build & Push: ${{ needs.build-and-push.result || 'skipped' }}"
          echo "- Deploy: ${{ needs.deploy.result || 'skipped' }}"