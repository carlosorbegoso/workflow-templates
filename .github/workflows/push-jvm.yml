name: Push JVM Image to Registry

on:
  workflow_call:
    inputs:
      push_to_registry:
        description: 'Whether to push the image to a registry (true/false)'
        required: false
        default: false
        type: boolean
      use_ghcr:
        description: 'Use GitHub Container Registry (ghcr.io) instead of Docker Hub'
        required: false
        default: true
        type: boolean
    secrets:
      GHCR_USERNAME:
        required: false
      GHCR_PAT:
        required: false

jobs:
  push:
    runs-on: ubuntu-latest
    outputs:
      docker-image: ${{ steps.docker-image.outputs.full-image }}
      image-version: ${{ steps.version.outputs.version }}
    timeout-minutes: 10  # Más rápido que nativo
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version from git
        id: version
        run: |
          # Generar versión para JVM (diferente de nativo)
          SHORT_HASH=$(git rev-parse --short HEAD)
          BRANCH_NAME="${{ github.ref_name }}"
          BUILD_DATE=$(date -u +'%Y%m%d')
          
          if [ "$BRANCH_NAME" = "main" ]; then
            VERSION="main-jvm-${SHORT_HASH}"
          else
            VERSION="${BRANCH_NAME}-jvm-${SHORT_HASH}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "build-date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "short-hash=${SHORT_HASH}" >> $GITHUB_OUTPUT
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "Generated JVM version: $VERSION"

      - name: Download artifact
        uses: actions/download-artifact@v4

      - name: Prepare JVM jar for Docker build
        run: |
          mkdir -p build/libs
          # Encontrar el JAR y copiarlo
          JAR_FILE=$(find . -maxdepth 3 -type f -name '*.jar' -not -name '*-sources.jar' -print -quit || true)
          if [ -z "$JAR_FILE" ]; then
            echo "No JAR artifact found in workspace after download-artifact."
            echo "Workspace listing:" 
            ls -R .
            exit 1
          fi
          echo "Found JAR: $JAR_FILE"
          cp -v "$JAR_FILE" build/libs/

      - name: Extract Docker image name
        id: docker-image
        run: |
          PROJECT_NAME=$(basename ${{ github.repository }})
          VERSION="${{ steps.version.outputs.version }}"
          
          if [ "${{ inputs.use_ghcr }}" = "true" ]; then
            IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/$PROJECT_NAME"
            FULL_IMAGE="$IMAGE_NAME:${VERSION}"
          else
            DOCKER_USER="${{ secrets.DOCKER_USERNAME }}"
            IMAGE_NAME="$DOCKER_USER/$PROJECT_NAME"
            FULL_IMAGE="docker.io/$IMAGE_NAME:${VERSION}"
          fi
          echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "full-image=$FULL_IMAGE" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: ${{ inputs.push_to_registry && inputs.use_ghcr }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME || github.actor }}
          password: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}

      - name: Build and push JVM Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/main/docker/Dockerfile.jvm  # Usar Dockerfile JVM
          push: ${{ inputs.push_to_registry }}
          load: ${{ !inputs.push_to_registry }}
          tags: ${{ steps.docker-image.outputs.full-image }}
          build-args: |
            BUILD_DATE=${{ steps.version.outputs.build-date }}
            VERSION=${{ steps.version.outputs.version }}
            VCS_REF=${{ steps.version.outputs.short-hash }}

      - name: Docker image info
        run: |
          echo "================================"
          echo "JVM Image built successfully!"
          echo "================================"
          echo ""
          echo "Full Image URI: ${{ steps.docker-image.outputs.full-image }}"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Type: JVM (fast startup, more memory)"
          echo ""
          if [ "${{ inputs.use_ghcr }}" = "true" ]; then
            echo "Registry: GitHub Container Registry (GHCR)"
          fi