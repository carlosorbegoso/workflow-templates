name: Docker Build & Push

on:
  workflow_call:
    inputs:
      build_type:
        description: 'Type of build: native or jvm'
        required: true
        type: string
      artifact_name:
        description: 'Name of the build artifact'
        required: true
        type: string
      push_to_registry:
        description: 'Whether to push to registry'
        required: false
        default: true
        type: boolean
      use_ghcr:
        description: 'Use GitHub Container Registry'
        required: false
        default: true
        type: boolean
    secrets:
      GHCR_USERNAME:
        required: false
      GHCR_PAT:
        required: false
    outputs:
      image-version:
        description: 'Generated image version'
        value: ${{ jobs.docker.outputs.image-version }}
      docker-image:
        description: 'Full Docker image URI'
        value: ${{ jobs.docker.outputs.docker-image }}

jobs:
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      image-version: ${{ steps.version.outputs.version }}
      docker-image: ${{ steps.image.outputs.uri }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: build/

      - name: Generate version
        id: version
        run: |
          SHORT_HASH=$(git rev-parse --short HEAD)
          BRANCH_NAME="${{ github.ref_name }}"
          BUILD_TYPE="${{ inputs.build_type }}"
          
          if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
            if [ "$BUILD_TYPE" = "jvm" ]; then
              VERSION="main-jvm-${SHORT_HASH}"
            else
              VERSION="main-${SHORT_HASH}"
            fi
          else
            if [ "$BUILD_TYPE" = "jvm" ]; then
              VERSION="${BRANCH_NAME}-jvm-${SHORT_HASH}"
            else
              VERSION="${BRANCH_NAME}-${SHORT_HASH}"
            fi
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Prepare Docker context
        run: |
          echo "Build artifacts:"
          ls -la build/
          
          # Validar Dockerfile
          DOCKERFILE="src/main/docker/Dockerfile.${{ inputs.build_type }}"
          if [ ! -f "$DOCKERFILE" ]; then
            echo "ERROR: $DOCKERFILE not found"
            exit 1
          fi
          echo "Using Dockerfile: $DOCKERFILE"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: inputs.push_to_registry && inputs.use_ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME || github.actor }}
          password: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: image
        run: |
          PROJECT_NAME=$(basename ${{ github.repository }})
          VERSION="${{ steps.version.outputs.version }}"
          IMAGE_URI="ghcr.io/${{ github.repository_owner }}/${PROJECT_NAME}:${VERSION}"
          
          echo "Building image: $IMAGE_URI"
          
          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            ${{ inputs.push_to_registry && '--push' || '--load' }} \
            --tag "$IMAGE_URI" \
            --file "./src/main/docker/Dockerfile.${{ inputs.build_type }}" \
            --build-arg VERSION="$VERSION" \
            --build-arg BUILD_TYPE="${{ inputs.build_type }}" \
            .
          
          echo "uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "âœ… Image ready: $IMAGE_URI"

      - name: Save image artifact (if not pushed)
        if: ${{ !inputs.push_to_registry }}
        run: |
          IMAGE_URI="${{ steps.image.outputs.uri }}"
          docker save -o "image-${{ inputs.build_type }}.tar" "$IMAGE_URI"

      - name: Upload image artifact
        if: ${{ !inputs.push_to_registry }}
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ steps.version.outputs.version }}
          path: image-${{ inputs.build_type }}.tar
          retention-days: 7