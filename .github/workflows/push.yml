name: Push to Docker Hub

on:
  workflow_call:
    inputs:
      push_to_registry:
        description: 'Whether to push the image to a registry (true/false)'
        required: false
        default: false
        type: boolean
      use_ghcr:
        description: 'Use GitHub Container Registry (ghcr.io) instead of Docker Hub'
        required: false
        default: false
        type: boolean
    secrets:
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false
      GHCR_USERNAME:
        required: false
      GHCR_PAT:
        required: false

jobs:
  push:
    runs-on: ubuntu-latest
    outputs:
      docker-image: ${{ steps.docker-image.outputs.full-image }}
      image-version: ${{ steps.version.outputs.version }}
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version from git
        id: version
        run: |
          # Generar versión consistente con el deploy
          SHORT_HASH=$(git rev-parse --short HEAD)
          BRANCH_NAME="${{ github.ref_name }}"
          BUILD_DATE=$(date -u +'%Y%m%d')
          
          # Intentar obtener tag de git
          GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")
          
          if [ -n "$GIT_TAG" ]; then
            # Si hay un tag exacto, usarlo
            VERSION="$GIT_TAG"
          elif [ "$BRANCH_NAME" = "main" ]; then
            # Para main, usar formato main-hash
            VERSION="main-${SHORT_HASH}"
          else
            # Para otras ramas, usar formato rama-hash
            VERSION="${BRANCH_NAME}-${SHORT_HASH}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "build-date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "short-hash=${SHORT_HASH}" >> $GITHUB_OUTPUT
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Download artifact
        uses: actions/download-artifact@v4

      - name: Prepare native runner for Docker build
        run: |
          # Ensure the Dockerfile COPY (build/*-runner) can find the native runner
          mkdir -p build
          # The download step writes artifacts into ./<artifact-name>/ by default.
          # Find the first file that looks like a native runner and copy it into build/
          RUNNER_FILE=$(find . -maxdepth 3 -type f -name '*-runner' -print -quit || true)
          if [ -z "$RUNNER_FILE" ]; then
            echo "No native runner artifact found in workspace after download-artifact."
            echo "Workspace listing:" 
            ls -R .
            exit 1
          fi
          echo "Found runner: $RUNNER_FILE"
          cp -v "$RUNNER_FILE" build/

      - name: Validate Dockerfile
        run: |
          if [ ! -f "src/main/docker/Dockerfile.native" ]; then
            echo "Error: Dockerfile.native no encontrado"
            exit 1
          fi

      - name: Extract Docker image name
        id: docker-image
        run: |
          PROJECT_NAME=$(basename ${{ github.repository }})
          VERSION="${{ steps.version.outputs.version }}"
          
          # Decide registry and image name based on inputs
          if [ "${{ inputs.use_ghcr }}" = "true" ]; then
            IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/$PROJECT_NAME"
            FULL_IMAGE="$IMAGE_NAME:${VERSION}"
          else
            DOCKER_USER="${{ secrets.DOCKER_USERNAME }}"
            IMAGE_NAME="$DOCKER_USER/$PROJECT_NAME"
            FULL_IMAGE="docker.io/$IMAGE_NAME:${VERSION}"
          fi
          echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "full-image=$FULL_IMAGE" >> $GITHUB_OUTPUT

      - name: Validate registry credentials
        if: ${{ inputs.push_to_registry && !inputs.use_ghcr }}
        run: |
          # When pushing to Docker Hub we require DOCKER_USERNAME and DOCKER_PASSWORD
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ] || [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "Error: DOCKER_USERNAME and DOCKER_PASSWORD must be set to push to Docker Hub."
            echo "Please add them in Settings → Secrets and variables → Actions for this repository."
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ inputs.push_to_registry && !inputs.use_ghcr }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        if: ${{ inputs.push_to_registry && inputs.use_ghcr }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME || github.actor }}
          password: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.docker-image.outputs.image-name }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/main/docker/Dockerfile.native
          push: ${{ inputs.push_to_registry }}
          load: ${{ !inputs.push_to_registry }}
          tags: ${{ steps.docker-image.outputs.full-image }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ steps.version.outputs.build-date }}
            VERSION=${{ steps.version.outputs.version }}
            VCS_REF=${{ steps.version.outputs.short-hash }}

      - name: Save image and upload artifact (no push)
        if: ${{ !inputs.push_to_registry }}
        run: |
          # Use the computed image tags produced by docker/metadata-action.
          # `steps.meta.outputs.tags` is a newline-separated list of full image refs.
          TAGS="${{ steps.meta.outputs.tags }}"
          IMAGE_TO_SAVE=$(echo "$TAGS" | head -n1)
          
          echo "Found built image tag: $IMAGE_TO_SAVE"
          echo "Saving image $IMAGE_TO_SAVE to image.tar"
          docker save -o image.tar "$IMAGE_TO_SAVE"

      - name: Upload image artifact
        if: ${{ !inputs.push_to_registry }}
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ steps.version.outputs.version }}
          path: image.tar
          retention-days: 7

      - name: Docker image info
        run: |
          echo "================================"
          echo "Image built successfully!"
          echo "================================"
          echo ""
          echo "Full Image URI: ${{ steps.docker-image.outputs.full-image }}"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Build Date: ${{ steps.version.outputs.build-date }}"
          echo "Short Hash: ${{ steps.version.outputs.short-hash }}"
          echo ""
          if [ "${{ inputs.use_ghcr }}" = "true" ]; then
            echo "Registry: GitHub Container Registry (GHCR)"
            echo "URL: https://ghcr.io/${{ github.repository_owner }}/${{ github.repository }}"
          else
            echo "Registry: Docker Hub"
            echo "URL: https://hub.docker.com/r/${{ steps.docker-image.outputs.image-name }}"
          fi
          echo ""
          echo "Tags generated:"
          echo "${{ steps.meta.outputs.tags }}"